<script>
document.addEventListener('DOMContentLoaded', () => {
            const input = document.getElementById('startDate');
            const button = document.getElementById('calendarButton');
            const dateDisplay = document.getElementById('selectedDateText');

            const bellButton = document.getElementById('toggleReminder');
            const bellIcon = document.getElementById('bellIcon');
            const reminderInput = document.getElementById('reminderInput');

            if (bellButton) {
              bellButton.addEventListener('click', () => {
                const isActive = reminderInput.value === 'yes';
                if (isActive) {
                  bellIcon.classList.remove('fa-bell');
                  bellIcon.classList.add('fa-bell-slash');
                  reminderInput.value = 'no';
                } else {
                  bellIcon.classList.remove('fa-bell-slash');
                  bellIcon.classList.add('fa-bell');
                  reminderInput.value = 'yes';
                }
              });
            }

            const picker = new Pikaday({
              field: input,
              format: 'YYYY-MM-DD',
              i18n: {
                previousMonth: 'Mes anterior',
                nextMonth: 'Mes siguiente',
                months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                weekdays: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb']
              },
              minDate: new Date(),
              onSelect: function (date) {
                const formatted = date.toISOString().split('T')[0];
                dateDisplay.textContent = formatted;
              }
            });

            button.addEventListener('click', () => {
              picker.show();
            });
          });

          document.getElementById('form-habito').addEventListener('submit-form-validado', async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const id = document.getElementById('habitId').value;

            const rawDate = formData.get('startDate');
            let startDateISO = null;

            if (rawDate) {
              const dateObj = new Date(rawDate);
              if (!isNaN(dateObj.getTime())) {
                startDateISO = dateObj.toISOString();
              } else {
                console.warn('Fecha inválida:', rawDate);
              }
            } else {
              console.warn('No se seleccionó fecha');
            }

            const data = {
              name: "<%= habitName %>",
              description: formData.get('description'),
              frequency: {
                type: formData.get('frequency[type]'),
                days: formData.getAll('frequency[days][]')
              },
              icon: "<%= iconPath %>",
              startDate: new Date(formData.get('startDate')).toISOString(),
              fieldValues: {
                unit: formData.get('fieldValues[unit]'),
                value: formData.get('fieldValues[value]'),
              },
              reminder: formData.get('reminder') === 'yes'
            };


        const url = id ? `/api/habit/${id}` : '/api/habit/personalizado';
        const method = id ? 'PUT' : 'POST';

        try {
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (!response.ok) {
                return mostrarAlerta({
                    title: 'Error',
                    text: result?.message,
                    imageUrl: '/img/sharki/triste.png',
                    redirectUrl: '/gestionarHabitos',
                    btnText: 'Aceptar'
                });
            }

            mostrarAlerta({
                title: '¡Hábito registrado!',
                text: 'Tu hábito fue guardado correctamente.',
                imageUrl: '/img/sharki/feliz.png',
                redirectUrl: `/<%= habitUrl %>/${id || result.habit.id}`,
                btnText: 'Aceptar'
            });
        } catch (error) {
            console.error('Error al enviar el hábito:', error);
            alert('Ocurrió un error al guardar el hábito.');
        }
    });

    document.querySelectorAll('.btn-days').forEach(btn => {
        btn.addEventListener('click', () => {
            btn.classList.toggle('dia_selected');
        });
    });

</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
  const unitSelect = document.getElementById('unitSelect');
  const numberInput = document.getElementById('goal-number');
  const sliderContainer = document.getElementById('goal-slider');
  const linearSliderContainer = document.getElementById('linear-slider-container');
  const linearSlider = document.getElementById('linearSlider');
  const linearSliderValue = document.getElementById('linearSliderValue');
  const goal = document.getElementById('goal');
  const hiddenSliderInput = document.getElementById('sliderHidden');

  const initialValue = parseInt(hiddenSliderInput.value) || 30;

  // Slider circular
  const slider1 = $("#circularSlider").roundSlider({
    radius: 60,
    min: 1,
    max: 60,
    value: initialValue,
    width: 10,
    handleSize: "+8",
    handleShape: "round",
    sliderType: "min-range",
    editableTooltip: false,
    tooltipFormat: () => '', // oculta el valor dentro del slider

    change: e => {
      hiddenSliderInput.value = e.value;
      updateSliderValueDisplay(e.value);
    },
    drag: e => {
      hiddenSliderInput.value = e.value;
      updateSliderValueDisplay(e.value);
    }
  }).data("roundSlider");

  // Slider lineal (inicial)
  let slider2 = {
    min: 1,
    max: 100,
    unitLabel: '',
    update: (min, max, unitLabel) => {
      linearSlider.min = min;
      linearSlider.max = max;
      let current = parseInt(hiddenSliderInput.value) || min;
      if (current < min) current = min;
      if (current > max) current = max;

      linearSlider.value = current;
      linearSliderValue.textContent = `${current} ${unitLabel}`;
      hiddenSliderInput.value = current;
      slider2.unitLabel = unitLabel;
    },
    initEvents: () => {
      linearSlider.oninput = () => {
        linearSliderValue.textContent = `${linearSlider.value} ${slider2.unitLabel}`;
        hiddenSliderInput.value = linearSlider.value;
      };
    }
  };
  slider2.initEvents();

  // Función para actualizar el slider circular
  const updateSlider1 = (min, max, unitLabel) => {
    slider1.option({
      min: min,
      max: max,
      tooltipFormat: () => ''
    });
    let current = slider1.getValue();
    if (current < min) current = min;
    if (current > max) current = max;
    slider1.setValue(current + 1);
    setTimeout(() => slider1.setValue(current), 10);
    hiddenSliderInput.value = current;
  };

  // Muestra el slider correspondiente y lo configura
function updateInputDisplay() {
  const selectedUnit = unitSelect.value;

  if (['min', 'hrs', 'km', 'pasos', 'pesos'].includes(selectedUnit)) {
    // Slider circular
    let max = 60;
    if (selectedUnit === 'min') max = 60;
    else if (selectedUnit === 'hrs') max = 24;
    else if (selectedUnit === 'km') max = 1000;
    else if (selectedUnit === 'pasos') max = 20000;
    else if (selectedUnit === 'pesos') max = 50000;

    updateSlider1(1, max, selectedUnit);
    sliderContainer.classList.remove('d-none');
    linearSliderContainer.classList.add('d-none');
    numberInput.classList.add('d-none');
    hiddenSliderInput.name = 'fieldValues[value]';
    goal.name = '';

  } else if (['repeticiones', 'ejercicios', 'paginas', 'rutinas', 'vasos', 'canciones', 'saltos'].includes(selectedUnit)) {
    // Slider lineal
    let max = 100;
    if (selectedUnit === 'repeticiones') max = 25;
    if (selectedUnit === 'ejercicios') max = 15;
    if (selectedUnit === 'paginas') max = 100;
    if (selectedUnit === 'rutinas') max = 10;
    if (selectedUnit === 'vasos') max = 15;
    if (selectedUnit === 'canciones') max = 20;
    if (selectedUnit === 'saltos') max = 500;

    slider2.update(1, max, selectedUnit);
    sliderContainer.classList.add('d-none');
    linearSliderContainer.classList.remove('d-none');
    numberInput.classList.add('d-none');
    hiddenSliderInput.name = 'fieldValues[value]';
    goal.name = '';
  } else {
    // Campo numérico normal
    sliderContainer.classList.add('d-none');
    linearSliderContainer.classList.add('d-none');
    numberInput.classList.remove('d-none');
    hiddenSliderInput.name = '';
    goal.name = 'fieldValues[value]';
  }
}

  unitSelect.addEventListener('change', updateInputDisplay);
  updateInputDisplay();
    function updateSliderValueDisplay(value) {
    const unit = document.getElementById('unitSelect')?.value || '';
    const display = document.getElementById('sliderValueDisplay');
    if (display) {
      let formattedValue = value;
    if (unit === 'pesos') {
      formattedValue = `$${value}`;
    } else {
      formattedValue = `${value}`;
    }
      display.textContent = formattedValue;
      display.classList.remove('d-none');
    }
  }
  updateSliderValueDisplay(hiddenSliderInput.value);
});

  
  function showInfoModal(message, type = 'info') {
  try {
    document.body.focus(); // evita conflicto con aria-hidden
  } catch (e) {}

  const modal = document.getElementById('infoModal');
  const modalTitle = document.getElementById('infoModalTitle');
  const modalBody = document.getElementById('infoModalBody');
  const modalIcon = document.getElementById('infoModalIcon');

  const types = {
    info: { title: 'Información', icon: 'fas fa-info-circle', color: 'text-info' },
    warning: { title: 'Advertencia', icon: 'fas fa-exclamation-triangle', color: 'text-warning' },
    success: { title: 'Éxito', icon: 'fas fa-check-circle', color: 'text-success' },
    error: { title: 'Error', icon: 'fas fa-times-circle', color: 'text-danger' }
  };

  const selected = types[type] || types.info;

  modalTitle.textContent = selected.title;
  modalBody.innerHTML = message;
  modalIcon.className = `${selected.icon} ${selected.color}`;

  setTimeout(() => {
    const bootstrapModal = new bootstrap.Modal(modal);
    bootstrapModal.show();
  }, 0);
}

function closeInfoModal() {
  document.activeElement.blur(); // quita el foco
  const modal = bootstrap.Modal.getInstance(document.getElementById('infoModal'));
  if (modal) modal.hide();
}
</script>