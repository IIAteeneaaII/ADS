<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <title>
    <%= habit ? habit.name : 'Hábito personalizado' %>
  </title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <%- include('partials/allStyles') %>
</head>

<body class="form_habitos">
  <% const icons=['personalizado.png', 'bienestar.png' , 'mental.png' , 'movimientoCorporal.png' ]; %>
    <div class="container">
      <%- include('partials/topBar', { title: 'Hábito Personalizado' }) %>

        <div class="tab-content mt-4 texto-alternativo">
          <form id="form-habito" method="post" action="javascript:void(0);">
            <input type="hidden" id="habitId" value="<%= habit ? habit.id : '' %>">

            <div class="mb-3">
              <label for="name" class="form-label">Nombre del hábito:
                <%- include('partials/helpButton', {
                  mensaje: 'Asignar un <strong>nombre</strong> al hábito te ayuda a identificarlo fácilmente, hacer seguimiento de tu progreso y mantener una intención clara. Un buen nombre puede motivarte y recordarte por qué comenzaste.'
                  + '<ul>' + '<li>Evita repetir el nombre del hábito</li>' + '</ul>' , tipo: 'info' }) %>
              </label>
              <input type="text" class="form-control" id="name" name="name" placeholder="Ej. Leer antes de dormir"
                maxlength="30" value="<%= habit ? habit.name : '' %>">
            </div>

            <div class="mb-3">
              <label for="description" class="form-label">Descripción:
                <%- include('partials/helpButton', {
                  mensaje: 'La <strong>descripción</strong> sirve para explicar más sobre el hábito.' , tipo: 'info' })
                  %>
              </label>

              <textarea class="form-control" id="description" name="description" placeholder="Ej. Cada día leer 10 páginas de mi libro favorito"
                rows="3" maxlength="120"><%= habit ? habit.description : '' %></textarea>
            </div>

            <div class="mb-3">
              <label class="form-label">Indica tu meta.
                <%- include('partials/helpButton', {
                  mensaje: 'Mediante tu <strong>meta</strong> podras establecer tus objetivos en un hábito.' ,
                  tipo: 'info' }) %>
              </label>
              <div class="d-flex align-items-center" id="goal-input-group">
                <div id="goal-number" class="flex-fill">
                  <input type="number" class="form-control goal-input me-2" id="goal" name="fieldValues[value]"
                    value="<%= habit ? habit.fieldValues.value : 1 %>" min="1">
                </div>

                <div id="goal-slider" class="d-none">
                  <div id="circularSlider"></div>
                  <input type="hidden" id="sliderHidden" name="" value="<%= habit ? habit.fieldValues.value : 30 %>">
                </div>

                <div id="linear-slider-container" class="d-none linear-container">
                  <input type="range" id="linearSlider" min="1" max="100" value="1" />
                  <span id="linearSliderValue">1</span>
                </div>

                <!-- <input type="number" class="form-control me-2" id="goal" name="fieldValues[value]" value="<%= habit ? habit.fieldValues?.value : 1 %>" min="1"> -->
                <div class="custom-select2">
                  <div id="sliderValueDisplay" class="sliderValueD fw-bold text-center mb-2 d-none"></div>
                <% const unidades = ['min', 'km', 'hrs', 'repeticiones', 'ejercicios', 'pasos', 'paginas', 'rutinas', 'vasos', 'saltos', 'pesos', 'canciones']; %>
                <% const unidadActual = habit ? habit.fieldValues.unit : 'min'; %>
                <% const etiquetas = {
                  min: 'minutos', km: 'kilometros', hrs: 'horas',
                  repeticiones: 'repeticiones', ejercicios: 'ejercicios', pasos: 'pasos',
                  paginas: 'paginas', rutinas: 'rutinas', vasos: 'vasos',
                  saltos: 'saltos', pesos: 'pesos', canciones: 'canciones'
                }; %>

                <select class="form-control form-select ms-2" id="unitSelect" name="fieldValues[unit]">
                  <% unidades.forEach(unidad => { %>
                    <option value="<%= unidad %>" <%= unidad === unidadActual ? 'selected' : '' %>>
                      <%= etiquetas[unidad] %>
                    </option>
                  <% }) %>
                </select>
                </div>

                <!-- <input type="hidden" name="fieldValues[unit]" value="min"> -->
              </div>
            </div>

            <div class="mt-4 mb-4 d-flex flex-column align-items-center text-center">
              <label for="startDate" class="form-label">Fecha de inicio:
                <%- include('partials/helpButton', {
                  mensaje: 'Selecciona una <strong>fecha de inicio</strong> del cual partira el hábito.' , tipo: 'info'
                  }) %>
              </label>
              <div class="mt-2 d-flex align-items-center gap-2 text-center">
                <input type="text" id="startDate" name="startDate" class="visually-hidden"
                  value="<%= habit ? habit.startDate.toISOString().split('T')[0] : '' %>">
                <button type="button" id="calendarButton" class="btn btn-dated btn-outline-primary">
                  <i class="fa fa-calendar"></i>
                </button>
                <span id="selectedDateText" class="selectedDate fw-bold">
                  <%= habit ? habit.startDate.toISOString().split('T')[0] : 'Sin seleccionar' %>
                </span>
              </div>

            </div>

            <div class="mb-3">
              <input type="hidden" name="frequency[type]" value="weekly">
              <label class="form-label">Días de la semana:
                <%- include('partials/helpButton', {
                  mensaje: 'Los <strong>días de la semana</strong> son los días en los que se tienen planeado realizar el hábito a cualquier hora del día.'
                  , tipo: 'info' }) %>
              </label>
              <div class="days-week d-flex flex-wrap mt-2 mb-3">
                <% const days=habit?.frequency?.days || []; %>
                  <% const allDays=['monday', 'tuesday' , 'wednesday' , 'thursday' , 'friday' , 'saturday' , 'sunday' ];
                    %>
                    <% const dayTranslations={ monday: 'Lun' , tuesday: 'Mar' , wednesday: 'Mie' , thursday: 'Jue' ,
                      friday: 'Vie' , saturday: 'Sab' , sunday: 'Dom' }; %>
                      <% allDays.forEach(day=> { %>
                        <input type="checkbox" class="btn-check" name="frequency[days][]" value="<%= day %>"
                          id="<%= day %>" <%=days.includes(day) ? 'checked' : '' %>>
                        <label class="btn-days <%= days.includes(day) ? 'dia_selected' : '' %>" for="<%= day %>">
                          <%= dayTranslations[day] %>
                        </label>
                        <% }); %>
              </div>
            </div>

            <div class="mt-3 mb-3 d-flex flex-column align-items-center text-center">
              <label class="form-label">¿Deseas recibir notificaciones?
                <%- include('partials/helpButton', {
                  mensaje: 'Las <strong>notificaciones</strong> permitirán recordar al usuario...',
                  tipo: 'info'
                }) %>
              </label>
              <button type="button" id="toggleReminder" class="btn btn-dated camapanaNotis">
                <i id="bellIcon" class="fa <%= habit && habit.reminder ? 'fa-bell' : 'fa-bell-slash' %>"></i>
              </button>
              <input type="hidden" id="reminderInput" name="reminder" value="<%= habit && habit.reminder ? 'yes' : 'no' %>">
            </div>

            <div class="mt-3 mb-3 d-flex flex-column align-items-center text-center">
              <label class="form-label" for="reminder">Selecciona un icono:
                <%- include('partials/helpButton', {
                  mensaje: 'Los <strong>iconos</strong> ayudarán al usuario a reconocer el tipo de hábito  <strong> Selecciona un icono</strong>) .'
                  , tipo: 'info' }) %>
              </label>

              <div class="dropdown text-center">
                <button class="mt-2 mb-2 btn-outline-primary dropdown-toggle d-flex align-items-center text-center" type="button"
                  id="iconDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                  <img id="selectedIconPreview" src="/img/tiposHabitos/personalizado.png" alt="Icono seleccionado"
                    style="width: 30px; height: 30px; margin-right: 8px;">
                </button>
                <ul class="dropdown-menu" aria-labelledby="iconDropdown" id="iconDropdownMenu">
                  <% icons.forEach(icon=> { %>
                    <li>
                      <a class="dropdown-item d-flex align-items-center icon-option" href="#" data-icon="<%= icon %>">
                        <img src="/img/tiposHabitos/<%= icon %>" alt="<%= icon %>"
                          style="width: 24px; height: 24px; margin-right: 8px;">
                        <%= icon.replace('.png', '' ) %>
                      </a>
                    </li>
                    <% }); %>
                </ul>
              </div>
              <input type="hidden" name="icon" id="iconInput" value="<%= habit?.icon?.replace('/img/tiposHabitos/', '') || 'personalizado.png' %>">
            </div>
            <div class="text-center">
              <button type="submit" class="btn-primary justify-content-center">Guardar hábito</button>
            </div>

          </form>
        </div>
    </div>

    <%- include('partials/modalInfo') %>

      <%- include('partials/allScripts') %>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
      <script src="/js/validarGestionarHabitos.js"></script>
      <script>
        
        document.addEventListener('DOMContentLoaded', () => {
          const input = document.getElementById('startDate');
          const button = document.getElementById('calendarButton');
          const dateDisplay = document.getElementById('selectedDateText');

          $(document).ready(function () {
            $('.select2').select2({
              placeholder: "Seleccione una hora",
              // minimumResultsForSearch: Infinity,
              language: {
                noResults: function () {
                  return "No se encontraron resultados";
                }
              }
            });
          });

        const bellButton = document.getElementById('toggleReminder');
        const bellIcon = document.getElementById('bellIcon');
        const reminderInput = document.getElementById('reminderInput');

        if (bellButton) {
          bellButton.addEventListener('click', () => {
            const isActive = reminderInput.value === 'yes';
            if (isActive) {
              bellIcon.classList.remove('fa-bell');
              bellIcon.classList.add('fa-bell-slash');
              reminderInput.value = 'no';
            } else {
              bellIcon.classList.remove('fa-bell-slash');
              bellIcon.classList.add('fa-bell');
              reminderInput.value = 'yes';
            }
          });
        }

        const picker = new Pikaday({
          field: input,
          format: 'YYYY-MM-DD',
          i18n: {
            previousMonth: 'Mes anterior',
            nextMonth: 'Mes siguiente',
            months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            weekdays: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
            weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb']
          },
          minDate: new Date(),
          onSelect: function (date) {
            const formatted = date.toISOString().split('T')[0];
            dateDisplay.textContent = formatted;
          }
        });

      button.addEventListener('click', () => {
          picker.show();
        });
      });

        document.getElementById('form-habito').addEventListener('submit-form-validado', async function (e) {
          e.preventDefault();

          const formData = new FormData(this);
          const id = document.getElementById('habitId').value;

          const rawDate = formData.get('startDate');
          let startDateISO = null;

          if (rawDate) {
            const dateObj = new Date(rawDate);
            if (!isNaN(dateObj.getTime())) {
              startDateISO = dateObj.toISOString();
            } else {
              console.warn('Fecha inválida:', rawDate);
            }
          } else {
            console.warn('No se seleccionó fecha');
          }

          const data = {
            name: formData.get('name'),
            description: formData.get('description'),
            frequency: {
              type: formData.get('frequency[type]'),
              days: formData.getAll('frequency[days][]')
            },
            icon: `/img/tiposHabitos/${formData.get('icon')}`,
            startDate: startDateISO,
            fieldValues: {
              unit: formData.get('fieldValues[unit]'),
              value: formData.get('fieldValues[value]'),
            },
            reminder: formData.get('reminder') === 'yes'
          };

          const url = id ? `/api/habit/${id}` : '/api/habit/personalizado';
          const method = id ? 'PUT' : 'POST';

          try {
            const response = await fetch(url, {
              method,
              headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${localStorage.getItem('token')}`
              },
              body: JSON.stringify(data)
            });

            const result = await response.json();
            console.log('Respuesta del servidor:', result, response.status);

            if (!response.ok) {
              return mostrarAlerta({
                title: 'Error',
                text: result?.message,
                imageUrl: '/img/sharki/triste.png',
                redirectUrl: '/gestionarHabitos',
                btnText: 'Aceptar'
              });
            }
            const redirectId = id || result.habit.id;
            mostrarAlerta({
              title: '¡Mucha Suerte!',
              text: 'Hábito registrado correctamente',
              imageUrl: '/img/sharki/feliz.png',
              redirectUrl: `/perso/${redirectId}`,
              btnText: 'Aceptar'
            });
          } catch (error) {
            console.error('Error al enviar el hábito:', error);
            alert('Ocurrió un error al guardar el hábito.');
          }
        });

        document.querySelectorAll('.btn-days').forEach(btn => {
          btn.addEventListener('click', () => {
            btn.classList.toggle('dia_selected');
          });
        });
        document.querySelectorAll('.icon-option').forEach(option => {
          option.addEventListener('click', (e) => {
            e.preventDefault();
            const icon = option.getAttribute('data-icon');
            document.getElementById('iconInput').value = icon;
            document.getElementById('selectedIconPreview').src = `/img/tiposHabitos/${icon}`;
          });
        });

      </script>
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const unitSelect = document.getElementById('unitSelect');
          const numberInput = document.getElementById('goal-number');
          const sliderContainer = document.getElementById('goal-slider');
          const linearSliderContainer = document.getElementById('linear-slider-container');
          const linearSlider = document.getElementById('linearSlider');
          const linearSliderValue = document.getElementById('linearSliderValue');
          const goal = document.getElementById('goal');
          const hiddenSliderInput = document.getElementById('sliderHidden');

          const initialValue = parseInt(hiddenSliderInput.value) || 30;

          // Slider circular
          const slider1 = $("#circularSlider").roundSlider({
            radius: 60,
            min: 1,
            max: 60,
            value: initialValue,
            width: 10,
            handleSize: "+8",
            handleShape: "round",
            sliderType: "min-range",
            editableTooltip: false,
            // tooltipFormat: e => `${e.value} min`,
            tooltipFormat: () => '', // oculta el valor dentro del slider

          change: e => {
            hiddenSliderInput.value = e.value;
            updateSliderValueDisplay(e.value);
          },
          drag: e => {
            hiddenSliderInput.value = e.value;
            updateSliderValueDisplay(e.value);
          }
          }).data("roundSlider");

          // Slider lineal (inicial)
          let slider2 = {
            min: 1,
            max: 100,
            unitLabel: '',
            update: (min, max, unitLabel) => {
              linearSlider.min = min;
              linearSlider.max = max;
              let current = parseInt(hiddenSliderInput.value) || min;
              if (current < min) current = min;
              if (current > max) current = max;

              linearSlider.value = current;
              linearSliderValue.textContent = `${current} ${unitLabel}`;
              hiddenSliderInput.value = current;
              slider2.unitLabel = unitLabel;
            },
            initEvents: () => {
              linearSlider.oninput = () => {
                linearSliderValue.textContent = `${linearSlider.value} ${slider2.unitLabel}`;
                hiddenSliderInput.value = linearSlider.value;
              };
            }
          };
          slider2.initEvents();

          // Función para actualizar el slider circular
          const updateSlider1 = (min, max, unitLabel) => {
            slider1.option({
              min: min,
              max: max,
              tooltipFormat: () => ''
            });
            let current = parseInt(hiddenSliderInput.value) || min;
            if (current < min) current = min;
            if (current > max) current = max;

            slider1.setValue(current + 1);
            setTimeout(() => slider1.setValue(current), 10);
            hiddenSliderInput.value = current;
            updateSliderValueDisplay(current);
          };

          // Muestra el slider correspondiente y lo configura
          function updateInputDisplay() {
            const selectedUnit = unitSelect.value;

            if (['min', 'hrs', 'km', 'pasos', 'pesos'].includes(selectedUnit)) {
              // Slider circular
              let max = 60;
              if (selectedUnit === 'min') max = 60;
              else if (selectedUnit === 'hrs') max = 24;
              else if (selectedUnit === 'km') max = 1000;
              else if (selectedUnit === 'pasos') max = 20000;
              else if (selectedUnit === 'pesos') max = 10000;

              updateSlider1(1, max, selectedUnit);
              sliderContainer.classList.remove('d-none');
              linearSliderContainer.classList.add('d-none');
              numberInput.classList.add('d-none');
              hiddenSliderInput.name = 'fieldValues[value]';
              goal.name = '';

              let initialValue = parseInt(hiddenSliderInput.value);
              if (isNaN(initialValue) || initialValue < 1) initialValue = 1;

                document.getElementById('sliderValueDisplay').classList.remove('d-none');

              const currentValue = parseInt(hiddenSliderInput.value) || 1;
              updateSliderValueDisplay(currentValue);


            } else if (['repeticiones', 'ejercicios', 'paginas', 'rutinas', 'vasos', 'canciones', 'saltos'].includes(selectedUnit)) {
              // Slider lineal
              document.getElementById('sliderValueDisplay').classList.add('d-none');
              let max = 100;
              if (selectedUnit === 'repeticiones') max = 25;
              if (selectedUnit === 'ejercicios') max = 15;
              if (selectedUnit === 'paginas') max = 100;
              if (selectedUnit === 'rutinas') max = 10;
              if (selectedUnit === 'vasos') max = 15;
              if (selectedUnit === 'canciones') max = 20;
              if (selectedUnit === 'saltos') max = 500;

              slider2.update(1, max, selectedUnit);
              sliderContainer.classList.add('d-none');
              linearSliderContainer.classList.remove('d-none');
              numberInput.classList.add('d-none');
              hiddenSliderInput.name = 'fieldValues[value]';
              goal.name = '';

            } else {
              // Campo numérico
              sliderContainer.classList.add('d-none');
              linearSliderContainer.classList.add('d-none');
              numberInput.classList.remove('d-none');
              hiddenSliderInput.name = '';
              goal.name = 'fieldValues[value]';
            }
          }


          unitSelect.addEventListener('change', updateInputDisplay);
          updateInputDisplay();
          
          function updateSliderValueDisplay(value) {
            const unit = document.getElementById('unitSelect')?.value || '';
            const display = document.getElementById('sliderValueDisplay');
            if (display) {
              let formattedValue = value;
            if (unit === 'pesos') {
              formattedValue = `$${value}`;
            } else {
              formattedValue = `${value}`;
            }
              display.textContent = formattedValue;
            }
          }

        });

      </script>
</body>

</html>